pipeline {
    agent any
    
    environment {
        registry = "masalinasgancedo/poc-simple-java"
        registryCredential = "dockerhub"
        dockerImage = ""
    }
  
    stages {
        stage("Checkout") {
            steps {
                git branch: "master", url: "https://github.com/masalinas/poc-simple-java.git"
            }
        }

        stage("Compile") {
            agent {
                docker { 
                    reuseNode true
                    image 'maven:3.8.1-adoptopenjdk-11'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            
            steps {
                sh "mvn clean install -DskipTests"
            }
        }
        
        stage("Checkstyle") {
            agent {
                docker { 
                    reuseNode true
                    image 'maven:3.8.1-adoptopenjdk-11'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            
            steps {
                sh "mvn checkstyle:checkstyle"
            }
        }
        
        stage("Run Tests") {
            parallel {
                stage("Runing unit tests") {
                    agent {
                        docker { 
                            reuseNode true
                            image 'maven:3.8.1-adoptopenjdk-11'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                
                    steps {
                        sh "mvn test -Punit"
                    }
                    
                    post {
                        always {
                            junit "**/TEST-*.xml"
                        }
                    }
                }
                
                stage("Runing integration tests") {
                    agent {
                        docker { 
                            reuseNode true
                            image 'maven:3.8.1-adoptopenjdk-11'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    
                    steps {
                        sh "mvn test -Pintegration"
                    }                
                }
            }
        }
        
        stage("Compile Image") {
            steps {
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
        
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry('', registryCredential ) {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}
